#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: (c) {{ year }}, {{ author_name }} <{{ author_email }}>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

DOCUMENTATION = r'''
---
module: pfsense_{{ module_name }}

short_description: Manage pfSense {{ module_name }}s

version_added: "0.6.0"

description:
  - Manage pfSense {{ module_name }}s

options:
  name:
    description: The name of the {{ module_name }}
    required: true
    type: str
  state:
    description: State in which to leave the {{ module_name }}
    choices: ['present', 'absent']
    default: present
    type: str
{% for name, param in params.items() %}
  {{ name }}:
    description: {{ "'" if ':' in param['description'] else '' }}{{ param['description'] | default('') }}{{ "'" if ':' in param['description'] else '' }}
{% if 'default' in param %}
    default: {{ param['default'] }}
{% endif %}
{% if 'choices' in param %}
    choices: {{ param['choices'] }}
{% endif %}
    type: {{ param['type'] | default('') }}
{% endfor %}

author: {{ author_name }} (@{{ author_handle }})
'''

EXAMPLES = r'''
- name: Add myitem {{ module_name }}
  pfsensible.{{ package }}.pfsense_{{ module_name }}:
    name: myitem
{% for name, param in params.items() %}
{% if param['example'] is defined %}
    {{ name }}: {{ param['example'] }}
{% else %}
    {{ name }}: {% if param['type'] == 'bool' %}false{% elif param['type'] == 'list' %}{% if 'choices' in param %}['{{ param['choices'][0:1] | join("', '") }}']{% else %}{{ param['choices'][0] }}{% endif %}{% elif param['type'] == 'str' %}{{ param['choices'][0] if 'choices' in param else '' }}{% endif %}

{% endif %}
{% endfor %}
    state: present

- name: Remove myitem {{ module_name }}
  pfsensible.{{ package }}.pfsense_{{ module_name }}:
    name: myitem
    state: absent
'''
RETURN = r'''
commands:
    description: the set of commands that would be pushed to the remote device (if pfSense had a CLI)
    returned: always
    type: list
    sample: ["create {{ module_name }} 'myitem'", "update {{ module_name }} 'myitem' set ...", "delete {{ module_name }} 'myitem'"]
'''

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.pfsensible.core.plugins.module_utils.module_base import PFSenseModuleBase

# Change to name of module, extend for needed parameters
{{ module_name | upper() }}_ARGUMENT_SPEC = {
    # Only name should be required here - othewise you cannot remove an item with just 'name'
    # Required arguments for creation should be noted in {{ module_name | upper() }}_REQUIRED_IF = ['state', 'present', ...] below
    'name': {'required': True, 'type': 'str'},
    'state': {
        'type': 'str',
        'default': 'present',
        'choices': ['present', 'absent']
    },
{% for param in params %}
    '{{ param }}': {
{% if 'choices' in params[param] %}
        'choices': {{ params[param]['choices'] }},
{% endif %}
        'type': '{{ params[param]['type'] | default('') }}',
    },
{% endfor %}
}

# Compact style
{{ module_name | upper() }}_ARGUMENT_SPEC = dict(
    # Only name should be required here - othewise you cannot remove an item with just 'name'
    # Required arguments for creation should be noted in {{ module_name | upper() }}_REQUIRED_IF = ['state', 'present', ...] below
    name=dict(required=True, type='str'),
    state=dict(type='str', default='present', choices=['present', 'absent']),
{% for param in params %}
    {{ param }}=dict(type='{{ params[param]['type'] | default('') }}'{% if 'choices' in params[param] %}, choices={{ params[param]['choices'] }},{% endif %}),
{% endfor %}
)

# TODO - check for validity - what parameters are actually required when creating a new {{ module_name }}?
{{ module_name | upper() }}_REQUIRED_IF = [
{% if module_type %}
    ['state', 'present', ['type']],
    ['type', '{{ params['type']['example'] }}', ['{{ params | dict2items | rejectattr('key', 'equalto', 'type') | selectattr('value.required', 'defined') | rejectattr('value.default', 'defined') | map(attribute='key') | join("', '") }}']],
{% else %}
    ['state', 'present', ['{{ params | dict2items | selectattr('value.required', 'defined') | rejectattr('value.default', 'defined') | map(attribute='key') | join("', '") }}']],
{% endif %}
]

{% if params_xml_only %}
# TODO - check this for validity and matching module argument
{{ module_name | upper() }}_MAP_PARAM = [
{% for param in params_xml_only %}
    ('ARG', '{{ param }}'),
{% endfor %}
]

# TODO - review this for clues for input validation.  Search for functions in the below require_once files in /etc and /usr/local/pfSense/include
PHP_VALIDATION = r'''
{{ php_requires }}

{{ php_save }}
'''

# TODO - add validation and parsing methods for parameters that require it
{{ module_name | upper() }}_ARG_ROUTE = dict(
# TODO - these are just examples
    authorizedkeys=dict(parse=p2o_ssh_pub_key),
    password=dict(validate=validate_password),
)

{% endif %}
# TODO - check for validity - what are default values when creating a new {{ module_name }}
{{ module_name | upper() }}_CREATE_DEFAULT = dict(
{% for item in params | dict2items | selectattr('value.default', 'defined') %}
    {{ item.key }}='{{ item.value.default | default('VALUE') }}',
{% endfor %}
{% for param in params_xml_only %}
    {{ param }}='{{ params[param]['example'] | default('VALUE') }}',
{% endfor %}
)

{% if is_package %}
{{ module_name | upper() }}_PHP_COMMAND_SET = r'''
require_once("{{ package }}.inc");
{{ package }}_sync_package();
'''

{% elif 'filter.inc' in php_requires %}
{{ module_name | upper() }}_PHP_COMMAND_SET = r'''
require_once("filter.inc");
if (filter_configure() == 0) { clear_subsystem_dirty('{{ php_subsystem }}'); }
'''

{% endif %}

class PFSense{{ module_name | capitalize() }}Module(PFSenseModuleBase):
    """ module managing pfsense {{ module_name }}s """

    ##############################
    # unit tests
    #
    # Must be class method for unit test usage
    @staticmethod
    def get_argument_spec():
        """ return argument spec """
        return {{ module_name | upper() }}_ARGUMENT_SPEC

    def __init__(self, module, pfsense=None):
        super(PFSense{{ module_name | capitalize() }}Module, self).__init__(module, pfsense, {{ 'package=\'' ~ package ~ '\', ' if is_package else ''}}root='{{ module_root }}', {{ 'is_package=True, ' if is_package else '' }}node='{{ module_node }}', key='{{ module_key }}'{{ ', update_php=' ~ module_name | upper() ~ '_PHP_COMMAND_SET' if 'filter.inc' in php_requires else '' }},
                                                arg_route={{ module_name | upper() }}_ARG_ROUTE, map_param={{ module_name | upper() }}_MAP_PARAM, create_default={{ module_name | upper() }}_CREATE_DEFAULT)


def main():
    module = AnsibleModule(
        argument_spec={{ module_name | upper() }}_ARGUMENT_SPEC,
        required_if={{ module_name | upper() }}_REQUIRED_IF,
        supports_check_mode=True)

    pfmodule = PFSense{{ module_name | capitalize() }}Module(module)
    # Pass params for testing framework
    pfmodule.run(module.params)
    pfmodule.commit_changes()


if __name__ == '__main__':
    main()
